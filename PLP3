1. What is the syntax for declaring a function in your language? 
	return type/void, method name, and parentheses with parameters if needed.
2. Are there any rules about where the function has to be placed in your code file so that it can 
run?
	Functions just need to be declared prior to when they're executed.
3. Does your language support recursive functions?
	Yes!
4. Can functions in your language accept multiple parameters?  Can they be of different data 
types?
	You can use as many parameters as desired, and they can be of any data type.
5. Can functions in your language return multiple values at the same time?  How is that 
implemented?  If not, are there ways around that problem?  What are they? 
	C++ cannot return more than one value. People tend to get around this by returning the data as a structure.
6. Is your language pass-by reference or value?  Check your code against outside sources in case 
there is anything tricky going on (like in Perl).
	C++ is pass by value, but you can pass references.
7. Where are the arguments, parameters and local variables stored (value-on-stack, ref-to-heap-on 
stack) during execution?
	Arguments and variables are stored on the stack, while references are stored on the heap.
8. What are the scoping rules in your language (visibility and lifetime of variables before, during 
and after code blocks)?
	C++ is statically scoped, meaning it can only reference variables in that method, values that are passed through, or that are globally accessible.
9. Are side-effects possible? Are there guard rails against side-effects?  
	Global variables can be permanently altered if used, which is why they tend to not be used.
10. Where are local variable values stored? (on the stack? On the heap?)
	The local variables are stored on the stack.
11. Are there any other aspects of functions in your language that aren't specifically asked about 
here, but that are important to know in order to write one?  What are they? (e.g. dynamic vs 
static scope)
	Not that I've come across.

https://www.learncpp.com/cpp-tutorial/the-stack-and-the-heap/
https://endjin.com/blog/2022/07/understanding-the-stack-and-heap-in-csharp-dotnet
