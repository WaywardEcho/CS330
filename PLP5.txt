1. Does your language support objects or something similar (e.g., structs or records)? 
	Yes! C++ can be used for object-oriented programming. It also supports structs.

	1. Are there naming conventions for objects, instance variables, or functions that people writing in your language should be aware of?
		It sticks to the C++ standard conventions of using camel casing.

2. Does your language have standard methods for functions that serve a similar purpose across all objects? For example, toString() in Java and __str__ in Python allow information about the objects to be printed. Are there similar functions in your language? 
	If you import <string>, there is a function included called to_string()

3. How does inheritance work (if it does)? Does your language support multiple inheritance? 
	C++ does support inheritance. It can do both multi-level inheritance and multiple inheritance.

4. If there is inheritance, how does your language deal with overloading method names and resolving those calls? 
	Just reference the function and make the changes in the child class. Same as with Python.
	
5. Is there anything else thatâ€™s important to know about objects and inheritance in your language? 
	There's nothing too different from what we've covered with Java and Python, just that the structure of a class is different.